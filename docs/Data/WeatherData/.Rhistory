}
}
head(power.results)
summary(power.results)
alpha
()
library(tidyverse)
library(dplyr)
library(reshape2)
library(ggplot2)
library(extrafont)
library(scales)
source("R_Functions/standardplottheme.R") # Default Ecofish theme
##########################################
## Power analysis for paired proportions.
##########################################
## Percent Recovery under the alternative hypothesis
pdiff <- 0.3
p.Recovery <- 0.2
## alpha testing rate
alpha = 0.05
################################################
## Loop over different Recovery values and calculate power.
#################################################
power.results <- data.frame()
scale_vec <- c(0.40054, 1, 1.82019)
for(k in seq_along(scale_vec)) {
this.scale <- scale_vec[k]
m <- c(0.2, 0.4, 0.6) #Test 20%, 40% and 60% count Recovery
for(j in m)
{
m.fry<- j # OTF: do these do anything? Important part is that j is applied to smolt survival
m.smolt <-j
################################################
## Loop over different sample sizes and calculate power.
#################################################
n <- seq(500,100000,by = 250)
for(i in n)
{
n.fry <- i
n.smolt <- i
## Assumed survival rates
survival.fry <- 0.003312
survival.smolt <- survival.fry*(1+pdiff) # E.g., fry survival x 1.3 where j = 0.3
survival.smolt # 0.004056
# Fish Counted
survival.smolt <- survival.smolt * m.smolt # observer/capture Recovery
survival.fry <- survival.fry * m.fry
# Scaling factor
survival.smolt <- survival.smolt * this.scale
survival.fry <- survival.fry * this.scale
## Assumed number of study years
n.years <- 5
## Expected counts:
n.fry*survival.fry
n.smolt*survival.smolt
## Coded per year to allow you to vary the annual survival later.
s.f <- rep(survival.fry, n.years)
s.s <- rep(survival.smolt, n.years)
## Power for scenario:
stat.test <- mean(s.s-s.f)
## Assume that fry and smolt are independent otherwise this variance is different.
var.test <- (1/n.years^2)*sum(s.f*(1-s.f)/n.fry + s.s*(1-s.s)/n.smolt)
## Testing mean Recovery
t.test <- stat.test/sqrt(var.test)
#power.results$newcolumn=0
## With the sample sizes you are using the t-test is just normally distributed.
## Assuming a one sided test, see z.val meaning and lower=FALSE.
pow <- pt(qt(alpha, df = n.years-1, lower = FALSE), df = n.years-1, ncp = t.test, lower = FALSE)
power.results <- rbind(power.results, data.frame(NumberReleased = i, Recovery = j, ScaleFac = this.scale, power = pow))
#power.results$newcolumn[j] <- power.results
}
}
}
head(power.results)
summary(power.results)
View(power.results)
library(tidyverse)
library(dplyr)
library(reshape2)
library(ggplot2)
library(extrafont)
library(scales)
source("R_Functions/standardplottheme.R") # Default Ecofish theme
##########################################
## Power analysis for paired proportions.
##########################################
## Percent Recovery under the alternative hypothesis
pdiff <- 0.3
p.Recovery <- 0.2
## alpha testing rate
alpha = 0.05
################################################
## Loop over different Recovery values and calculate power.
#################################################
power.results <- data.frame()
scale_vec <- c(0.40054, 1, 1.82019) # scale for 10th, mean and 90th percentile returns calculated from 2000 to 2021.
for(k in seq_along(scale_vec)) {
this.scale <- scale_vec[k]
m <- c(0.2, 0.4, 0.6) #Test 20%, 40% and 60% count Recovery
for(j in m)
{
m.fry<- j
m.smolt <-j
################################################
## Loop over different sample sizes and calculate power.
#################################################
n <- seq(500,100000,by = 250)
for(i in n)
{
n.fry <- i
n.smolt <- i
## Assumed survival rates
survival.fry <- 0.003312 # calculated
survival.smolt <- survival.fry*(1+pdiff) # E.g., fry survival x 1.3 where j = 0.3
survival.smolt # 0.004056
# Fish Counted
survival.smolt <- survival.smolt * m.smolt # observer/capture Recovery
survival.fry <- survival.fry * m.fry
# Scaling factor
survival.smolt <- survival.smolt * this.scale
survival.fry <- survival.fry * this.scale
## Assumed number of study years
n.years <- 5
## Expected counts:
n.fry*survival.fry
n.smolt*survival.smolt
## Coded per year to allow you to vary the annual survival later.
s.f <- rep(survival.fry, n.years)
s.s <- rep(survival.smolt, n.years)
## Power for scenario:
stat.test <- mean(s.s-s.f)
## Assume that fry and smolt are independent otherwise this variance is different.
var.test <- (1/n.years^2)*sum(s.f*(1-s.f)/n.fry + s.s*(1-s.s)/n.smolt)
## Testing mean Recovery
t.test <- stat.test/sqrt(var.test)
#power.results$newcolumn=0
## With the sample sizes you are using the t-test is just normally distributed.
## Assuming a one sided test, see z.val meaning and lower=FALSE.
pow <- pt(qt(alpha, df = n.years-1, lower = FALSE), df = n.years-1, ncp = t.test, lower = FALSE)
power.results <- rbind(power.results, data.frame(NumberReleased = i, Recovery = j, ScaleFac = this.scale, power = pow))
#power.results$newcolumn[j] <- power.results
}
}
}
head(power.results)
summary(power.results)
library(tidyverse)
library(dplyr)
library(reshape2)
library(ggplot2)
library(extrafont)
library(scales)
source("R_Functions/standardplottheme.R") # Default Ecofish theme
##########################################
## Power analysis for paired proportions.
##########################################
## Percent difference under the alternative hypothesis
pdiff <- 0.3
p.Survival <- 0.2
## alpha testing rate
alpha = 0.05
################################################
## Loop over different difference values and calculate power.
#################################################
power.results <- data.frame()
scale_vec <- c(0.40054, 1, 1.82019) # scale for 10th, mean and 90th percentile returns calculated from 2000 to 2021.
for(k in seq_along(scale_vec)) {
this.scale <- scale_vec[k]
m <- seq(0.1,0.4, by = 0.1) %>% # test from 0.1% to 0.4% difference
append(0.96) # add 0.96
for(j in m)
{
m.fry<- j # OTF: do these do anything? Important part is that j is applied to smolt survival
m.smolt <-j
################################################
## Loop over different sample sizes and calculate power.
#################################################
n <- seq(500,100000,by = 250)
for(i in n)
{
n.fry <- i
n.smolt <- i
## Assumed survival rates
survival.fry <- 0.003312
survival.smolt <- survival.fry*(1+j) # E.g., fry survival x 1.3 where j = 0.3
survival.smolt # 0.004056
# Fish Counted
survival.smolt <- survival.smolt * 0.4 # observer/capture efficiency
survival.fry <- survival.fry * 0.4
# Scaling factor
survival.smolt <- survival.smolt * this.scale
survival.fry <- survival.fry * this.scale
## Assumed number of study years
n.years <- 5
## Expected counts:
n.fry*survival.fry
n.smolt*survival.smolt
## Coded per year to allow you to vary the annual survival later.
s.f <- rep(survival.fry, n.years)
s.s <- rep(survival.smolt, n.years)
## Power for scenario:
stat.test <- mean(s.s-s.f)
## Assume that fry and smolt are independent otherwise this variance is different.
var.test <- (1/n.years^2)*sum(s.f*(1-s.f)/n.fry + s.s*(1-s.s)/n.smolt)
## Testing mean difference
t.test <- stat.test/sqrt(var.test)
#power.results$newcolumn=0
## With the sample sizes you are using the t-test is just normally distributed.
## Assuming a one sided test, see z.val meaning and lower=FALSE.
pow <- pt(qt(alpha, df = n.years-1, lower = FALSE), df = n.years-1, ncp = t.test, lower = FALSE)
power.results <- rbind(power.results, data.frame(NumberReleased = i, Survival = j, ScaleFac = this.scale, power = pow))
#power.results$newcolumn[j] <- power.results
}
}
}
head(power.results)
summary(power.results)
#### EAV Personal Project
#### Clear workspace ####
rm(list = ls())
#### Load Packages and Themes ####
library(tidyverse)
library(tidyr)
library(dplyr)
library(lubridate)
#library(plyr)
#library(readr)
library(reshape2)
library(ggplot2)
#library(extrafont)
#library(scales)
library(readxl)
library(data.table)
#library(purrr)
library(read_csv)
#### Set Working Directory and Load Data ####
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
list.files()
#### Load and Prepare Data ####
## Combine and Format Weather Data ##
csv_files = list.files(path = 'WeatherData/', pattern = "csv$", full.names = TRUE) ## Create list of all .csv files
weather <- map_dfr(csv_files, read.csv)                                      ## Create dataframe containing all .csv files
colnames(weather)
rm(list = ls())
library(dplyr)
library(purrr)
library(readr)
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
files <- list.files(path = 'WeatherData/', pattern = "csv$", full.names = TRUE)
output <-
map_dfr(
files,
read_csv,
col_types = cols_only(
Date/Time = Date(),
Year = col_double(),
Month = col_double(),
Day = col_double()
)
) %>%
group_by(DateTime) %>%
summarise(across(everything(), sum, na.rm = TRUE))
rm(list = ls())
library(dplyr)
library(purrr)
library(readr)
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
files <- list.files(path = 'WeatherData/', pattern = "csv$", full.names = TRUE)
output <-
map_dfr(
files,
read_csv,
col_types = cols_only(
Date/Time = Date(),
Year = col_double(),
Month = col_double(),
Day = col_double()
)
) %>%
group_by(DateTime) %>%
summarise(across(everything(), sum, na.rm = TRUE))
data_join <- list.files(path = "C:/Users/evogt/Desktop/R Data/Tyee/Data/", # Identify all CSV files
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%                              # Store all files in list
reduce(full_join, by = "Date/Time")                      # Full-join data sets into one data set
data_join
data_join <- list.files(path = "C:/Users/evogt/Desktop/R Data/Tyee/Data/", # Identify all CSV files
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%                              # Store all files in list
reduce(full_join, by = "Date/Time")                      # Full-join data sets into one data set
rm(list = ls())
library(dplyr)
library(purrr)
library(readr)
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
files <- list.files(path = 'WeatherData/', pattern = "csv$", full.names = TRUE)
output <-
map_dfr(
files,
read_csv,
col_types = cols_only(
Date/Time = Date(),
Year = col_double(),
Month = col_double(),
Day = col_double()
)
) %>%
group_by(DateTime) %>%
summarise(across(everything(), sum, na.rm = TRUE))
files
map_dfr(
files,
read_csv,
col_types = cols_only(
Date/Time = Date(),
Year = col_double(),
Month = col_double(),
Day = col_double()
)
)
output <-
map_dfr(
files,
read_csv,
col_types = cols_only(
Date/Time = Date(),
Year = col_double(),
Month = col_double(),
Day = col_double()
)
)
output <-
map_dfr(
files,
read_csv,
col_types = cols_only(
Date/Time = Date(),
Year = col_double(),
Month = col_double(),
Day = col_double()
)
)
data_join <- list.files(path = "C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData/", # Identify all CSV files
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%                              # Store all files in list
reduce(full_join, by = "Date/Time")                      # Full-join data sets into one data set
data_join
rm(list = ls())
library(plyr)
library(dplyr)
library(purrr)
library(readr)
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
files <- list.files(path = 'WeatherData/', pattern = "csv$", full.names = TRUE)
output <-
map_dfr(
files,
read_csv,
col_types = cols_only(
Date/Time = Date(),
Year = col_double(),
Month = col_double(),
Day = col_double()
)
) %>%
group_by(DateTime) %>%
summarise(across(everything(), sum, na.rm = TRUE))
data_join <- list.files(path = "C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData/", # Identify all CSV files
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) %>%                              # Store all files in list
reduce(full_join, by = "Date/Time")                      # Full-join data sets into one data set
data_join
data_join <- list.files(path = "C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData/", # Identify all CSV files
pattern = "*.csv", full.names = TRUE) %>%
lapply(read_csv) #%>%                              # Store all files in list
#reduce(full_join, by = "Date/Time")                      # Full-join data sets into one data set
data_join
#### EAV Personal Project
#### Clear workspace ####
rm(list = ls())
#### Load Packages and Themes ####
library(tidyverse)
library(tidyr)
library(dplyr)
library(lubridate)
#library(plyr)
#library(readr)
library(reshape2)
library(ggplot2)
#library(extrafont)
#library(scales)
library(readxl)
library(data.table)
#library(purrr)
library(read_csv)
#### Set Working Directory and Load Data ####
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
list.files()
#### Load and Prepare Data ####
## Combine and Format Weather Data ##
csv_files = list.files(path = 'WeatherData/', pattern = "csv$", full.names = TRUE) ## Create list of all .csv files
weather <- map_dfr(csv_files, read.csv)                                      ## Create dataframe containing all .csv files
colnames(weather)
## Reduce Weather Data to only include data from July 1 to Sept 30
weather$Date.Time <- as.Date(weather$Date.Time)
weather$month  <- as.numeric(format(as.Date(weather$Date.Time, format = "%d/%m%Y"), "%m"))
weather <- subset(weather, month >=7)
weather <- subset(weather, month <=9)
csv_files = list.files(path = 'WeatherData/', pattern = "csv$", full.names = TRUE)
csv_files
map_dfr(csv_files, read.csv)
install.packages("easycsv")
library(easycsv)
#### EAV Personal Project
#### Clear workspace ####
rm(list = ls())
#### Load Packages and Themes ####
library(tidyverse)
library(tidyr)
library(dplyr)
library(lubridate)
#library(plyr)
#library(readr)
library(reshape2)
library(ggplot2)
#library(extrafont)
#library(scales)
library(readxl)
library(data.table)
#library(purrr)
library(read_csv)
librar
#### Set Working Directory and Load Data ####
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
list.files()
#### Load and Prepare Data ####
## Combine and Format Weather Data ##
csv_files = list.files(path = 'WeatherData/', pattern = "csv$", full.names = TRUE)
csv_files
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
tbl <-
list.files(path = 'WeatherData/', pattern = "*.csv") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
library(tidyr)
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
files <- list.files(path = 'WeatherData/', pattern = "csv$", full.names = TRUE)
tbl <-
list.files(path = 'WeatherData/', pattern = "*.csv") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
tbl <-
list.files(path = 'WeatherData/', pattern = "*csv$") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
map_df(~read_csv(., col_types = cols(.default = "c")))
path = 'WeatherData/'
map_df_read_csv <- function(path, pattern = "*.csv") {
list.files(path, pattern, full.names = TRUE) %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
}
View(map_df_read_csv)
map_df_read_csv <- function(path, pattern = "*.csv") {
list.files(path, pattern, full.names = TRUE) %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
}
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
files <- list.files(path = 'WeatherData/', pattern = "*.csv", full.names = TRUE)
path = 'WeatherData/'
pattern = "*.csv"
tbl <-
list.files(path = 'WeatherData/', pattern = "*csv$") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
map_df_read_csv <- function(path, pattern = "*.csv") {
list.files(path, pattern, full.names = TRUE) %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
}
tbl <-
list.files(pattern = "*.csv") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
tbl <-
list.files(pattern = "*.csv") %>%
map_dfr(~read_csv(., col_types = cols(.default = "c")))
list.files(pattern = "*.csv")
list.files(path = 'WeatherData/', pattern = "*.csv")
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/")
tbl <-
list.files(path = 'WeatherData/', pattern = "*.csv") %>%
map_dfr(~read_csv(., col_types = cols(.default = "c")))
list.files(path = 'WeatherData/', pattern = "*.csv")
tbl <-
list.files(pattern = "*.csv") %>%
map_dfr(~read_csv(., col_types = cols(.default = "c")))
list.files(pattern = "*.csv")
list.files(path = 'WeatherData/', pattern = "*.csv", full.names = TRUE)
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData")
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData")
dir()
rm(list = ls())
library(plyr)
library(dplyr)
library(purrr)
library(readr)
library(easycsv)
library(tidyr)
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData")
dir()
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData")
dir()
list.files(pattern = "*.csv")
list.files(path, pattern, full.names = TRUE)
list.files(path = 'WeatherData/', pattern = "*csv$")
files <- list.files( pattern = "*.csv", full.names = TRUE)
files
