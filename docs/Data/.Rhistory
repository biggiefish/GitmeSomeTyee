tidecatch <- merge(raw_catch, raw_tides, by = "DateTime")
tidecatch$ID <-seq.int(nrow(tidecatch))                               ## Create "ID" column, to treat each row independently.
colnames(tidecatch)
## Remove Tide Action from catches with no known time.
tidecatch$TideAction[tidecatch$Time == 0] <- "UnknownTide"
tidecatch$TideAction <- as.factor(tidecatch$TideAction)
colnames(tidecatch)
## Switch Tide Action to Wide
wide <-  with(tidecatch, table(ID, TideAction))
catch22 <- as.data.frame.matrix(wide)
catch22$ID <- row.names(catch22)
colnames(catch22)
## Merge long format Tide Action data with tidecatch dataset
tidecatch2 <- merge(tidecatch, catch22, by = "ID", all = TRUE)
## Remove unnecessary columns ##
tidecatch <- subset(tidecatch2, select = -c(Year.y, Year.x, RawTime, TimeAdj, RawDate, Time2, Month))
colnames(tidecatch)
## Merge Flows Data with tideCatch Data ##
catch <- merge(flowx, tidecatch, by = "Date", all = TRUE)
## Remove unnecessary columns ##
catch <- subset(catch, select = -DateStandard)
colnames(catch)
## Merge Weather data with Flows
flowx <- merge(flows, wx, by = "Date")
#### Merge Datasets ####
## Merge Flow Data with Date Sequence Data ##
flows <- merge(date_seq, raw_flow, by = "Date")
wx
#### EAV Personal Project
#### Clear workspace ####
rm(list = ls())
#### Load Packages and Themes ####
library(tidyverse)
library(tidyr)
library(dplyr)
library(lubridate)
#library(plyr)
#library(readr)
library(reshape2)
library(ggplot2)
#library(extrafont)
#library(scales)
library(readxl)
library(data.table)
#library(purrr)
library(read_csv)
library(data.table)
#### Load and Format Data ####
####  1. Create Date Sequence from 15-July-2002 to 15-Sept-2021 ####
df <- data.frame(Date = seq(as.Date('2002-07-15'), as.Date('2021-09-15'), by = 'days'))   ## Create dataframe of all dates between July 15, 2002 and Sept 15, 2021.
df$month  <- as.numeric(format(as.Date(df$Date, format = "%d/%m%Y"), "%m"))           ## Calculate month associated with each date
date_seq <- subset(df, month >= 7 & month <=9)
####    2. WEATHER DATA ####
## Set WD for Weather Data
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData/")
## Import all files and create dataset
weather <-  list.files(pattern = "csv$") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
colnames(weather)
## Select Key Columns
wx <- weather %>% select('Date/Time',
'Year',
'Month',
'Day',
'Total Rain (mm)',
'Total Precip (mm)')
## Rename Key Columns
wx <- wx %>%
rename(Date = `Date/Time`,
Rain = `Total Rain (mm)`,
Precip = `Total Precip (mm)`,
WindDir = `Dir of Max Gust (10s deg)`,
WindSpd = `Spd of Max Gust (km/h)`)
colnames(wx)
## Format Date
wx$Date <- as_date(wx$Date)
## Recalculate Month for each date
wx$Month <- month(as.POSIXlt(wx$Date, format= "%d/%m/%Y"))
## Reduce dataset to only show dates between July 1 to Sept 30.
wx <- wx %>% filter(Month >= 7, Month <=9)
#### EAV Personal Project
#### Clear workspace ####
rm(list = ls())
#### Load Packages and Themes ####
library(tidyverse)
library(tidyr)
library(dplyr)
library(lubridate)
#library(plyr)
#library(readr)
library(reshape2)
library(ggplot2)
#library(extrafont)
#library(scales)
library(readxl)
library(data.table)
#library(purrr)
library(read_csv)
library(data.table)
#### Load and Format Data ####
####  1. Create Date Sequence from 15-July-2002 to 15-Sept-2021 ####
df <- data.frame(Date = seq(as.Date('2002-07-15'), as.Date('2021-09-15'), by = 'days'))   ## Create dataframe of all dates between July 15, 2002 and Sept 15, 2021.
df$month  <- as.numeric(format(as.Date(df$Date, format = "%d/%m%Y"), "%m"))           ## Calculate month associated with each date
date_seq <- subset(df, month >= 7 & month <=9)
####    2. WEATHER DATA ####
## Set WD for Weather Data
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData/")
## Import all files and create dataset
weather <-  list.files(pattern = "csv$") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
colnames(weather)
## Select Key Columns
wx <- weather %>% select('Date/Time',
'Year',
'Month',
'Day',
'Total Rain (mm)',
'Total Precip (mm)')
## Rename Key Columns
wx <- wx %>%
rename(Date = `Date/Time`,
Rain = `Total Rain (mm)`,
Precip = `Total Precip (mm)`)
colnames(wx)
## Format Date
wx$Date <- as_date(wx$Date)
## Recalculate Month for each date
wx$Month <- month(as.POSIXlt(wx$Date, format= "%d/%m/%Y"))
## Reduce dataset to only show dates between July 1 to Sept 30.
wx <- wx %>% filter(Month >= 7, Month <=9)
#### 3. CATCH DATA (Daily) ####
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/") # Set up WD for other non-weather datasets).
raw_catch  <- read_excel("TyeeCatchData.xlsx") # Date, time and size of capture
## Format Catch Data ##
raw_catch$TimeAdj <- as.POSIXct(raw_catch$TimeAdj , format = "%d%m%Y%H:%M:%S")
raw_catch$DateStandard <- as.POSIXct(raw_catch$DateStandard , format = "%d%m%Y%H:%M:%S")
raw_catch$RawDate <- as.Date(raw_catch$RawDate)
#### 4. TIDE DATA (Hourly) ####
raw_tides  <- read_excel("TideData.xlsx")      # Hourly tide data
## Format Tide Data ##
raw_tides$DateTime <- as.POSIXct(raw_tides$DateTime , format = "%d%m%Y%H:%M:%S")
raw_tides$Date <- as.Date(raw_tides$Date)
raw_tides <- raw_tides %>% rename(TideHeight = "SLEV(metres)")
#### 5. FLOW DATA (Daily) ####
## Import data ##
raw_flow   <- read_excel("CR_Discharge.xlsx")  # daily discharge data
## Format Flow Data ##
raw_flow$Date <- as.Date(raw_flow$Date)
raw_flow <- raw_flow %>% rename(Discharge = Value)
#### Merge Datasets ####
## Merge Flow Data with Date Sequence Data ##
flows <- merge(date_seq, raw_flow, by = "Date")
## Remove unnecessary columns ##
colnames(flows)
flows <- subset(flows, select = -c(Year, month, Month, PARAM, StationID, SYM))
## Merge Weather data with Flows
flowx <- merge(flows, wx, by = "Date")
## Merge Tide Data to Catch Date ##
tidecatch <- merge(raw_catch, raw_tides, by = "DateTime")
tidecatch$ID <-seq.int(nrow(tidecatch))                               ## Create "ID" column, to treat each row independently.
colnames(tidecatch)
## Remove Tide Action from catches with no known time.
tidecatch$TideAction[tidecatch$Time == 0] <- "UnknownTide"
tidecatch$TideAction <- as.factor(tidecatch$TideAction)
colnames(tidecatch)
## Switch Tide Action to Wide
wide <-  with(tidecatch, table(ID, TideAction))
catch22 <- as.data.frame.matrix(wide)
catch22$ID <- row.names(catch22)
colnames(catch22)
## Merge long format Tide Action data with tidecatch dataset
tidecatch2 <- merge(tidecatch, catch22, by = "ID", all = TRUE)
## Remove unnecessary columns ##
tidecatch <- subset(tidecatch2, select = -c(Year.y, Year.x, RawTime, TimeAdj, RawDate, Time2, Month))
colnames(tidecatch)
## Merge Flows Data with tideCatch Data ##
catch <- merge(flowx, tidecatch, by = "Date", all = TRUE)
## Remove unnecessary columns ##
catch <- subset(catch, select = -DateStandard)
colnames(catch)
#### EAV Personal Project
#### Clear workspace ####
rm(list = ls())
#### Load Packages and Themes ####
library(tidyverse)
library(tidyr)
library(dplyr)
library(lubridate)
#library(plyr)
#library(readr)
library(reshape2)
library(ggplot2)
#library(extrafont)
#library(scales)
library(readxl)
library(data.table)
#library(purrr)
library(read_csv)
library(data.table)
#### Load and Format Data ####
####  1. Create Date Sequence from 15-July-2002 to 15-Sept-2021 ####
df <- data.frame(Date = seq(as.Date('2002-07-15'), as.Date('2021-09-15'), by = 'days'))   ## Create dataframe of all dates between July 15, 2002 and Sept 15, 2021.
df$month  <- as.numeric(format(as.Date(df$Date, format = "%d/%m%Y"), "%m"))           ## Calculate month associated with each date
date_seq <- subset(df, month >= 7 & month <=9)
####    2. WEATHER DATA ####
## Set WD for Weather Data
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData/")
## Import all files and create dataset
weather <-  list.files(pattern = "csv$") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
colnames(weather)
## Select Key Columns
wx <- weather %>% select('Date/Time',
'Year',
'Month',
'Day',
'Total Rain (mm)',
'Total Precip (mm)')
## Rename Key Columns
wx <- wx %>%
rename(Date = `Date/Time`,
Rain = `Total Rain (mm)`,
Precip = `Total Precip (mm)`)
colnames(wx)
## Format Date
wx$Date <- as_date(wx$Date)
## Recalculate Month for each date
wx$Month <- month(as.POSIXlt(wx$Date, format= "%d/%m/%Y"))
## Reduce dataset to only show dates between July 1 to Sept 30.
wx <- wx %>% filter(Month >= 7, Month <=9)
#### 3. CATCH DATA (Daily) ####
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/") # Set up WD for other non-weather datasets).
raw_catch  <- read_excel("TyeeCatchData.xlsx") # Date, time and size of capture
## Format Catch Data ##
raw_catch$TimeAdj <- as.POSIXct(raw_catch$TimeAdj , format = "%d%m%Y%H:%M:%S")
raw_catch$DateStandard <- as.POSIXct(raw_catch$DateStandard , format = "%d%m%Y%H:%M:%S")
raw_catch$RawDate <- as.Date(raw_catch$RawDate)
#### 4. TIDE DATA (Hourly) ####
raw_tides  <- read_excel("TideData.xlsx")      # Hourly tide data
## Format Tide Data ##
raw_tides$DateTime <- as.POSIXct(raw_tides$DateTime , format = "%d%m%Y%H:%M:%S")
raw_tides$Date <- as.Date(raw_tides$Date)
raw_tides <- raw_tides %>% rename(TideHeight = "SLEV(metres)")
#### 5. FLOW DATA (Daily) ####
## Import data ##
raw_flow   <- read_excel("CR_Discharge.xlsx")  # daily discharge data
## Format Flow Data ##
raw_flow$Date <- as.Date(raw_flow$Date)
raw_flow <- raw_flow %>% rename(Discharge = Value)
#### Merge Datasets ####
## Merge Flow Data with Date Sequence Data ##
flows <- merge(date_seq, raw_flow, by = "Date")
## Remove unnecessary columns ##
colnames(flows)
flows <- subset(flows, select = -c(Year, month, Month, PARAM, StationID, SYM))
## Merge Weather data with Flows
flowx <- merge(flows, wx, by = "Date")
## Merge Tide Data to Catch Data ##
tidecatch <- merge(raw_catch, raw_tides, by = "DateTime")
tidecatch$ID <-seq.int(nrow(tidecatch))                               ## Create "ID" column, to treat each row independently.
colnames(tidecatch)
## Remove Tide Action from catches with no known time.
tidecatch$TideAction[tidecatch$Time == 0] <- "UnknownTide"
tidecatch$TideAction <- as.factor(tidecatch$TideAction)
colnames(tidecatch)
## Switch Tide Action to Wide and Merge with TideCatch Dataset
wide <-  with(tidecatch, table(ID, TideAction))
catch22 <- as.data.frame.matrix(wide)
catch22$ID <- row.names(catch22)
tidecatch22 <- merge(tidecatch, catch22, by = "ID", all = TRUE)
## Remove unnecessary columns ##
tidecatch <- subset(tidecatch22, select = -c(Year.y, Year.x, RawTime, TimeAdj, RawDate, Time2, Month))
colnames(tidecatch)
## Merge Flows Data with TideCatch Data ##
catch <- merge(flowx, tidecatch, by = "Date", all = TRUE)
## Remove unnecessary columns ##
catch <- subset(catch, select = -DateStandard)
colnames(catch)
## Remove unnecessary columns ##
catch <- subset(catch, select = -DateStandard)
colnames(catch)
catch33 <- catch %>% group_by(year,month) %>%
summarize(meanflow = mean(Discharge))
catch33 <- catch %>% group_by(Year, Month) %>%
summarize(meanflow = mean(Discharge))
catch33 <- catch %>%
group_by(Month, Year) %>%
summarize(meanflow = mean(Discharge))
catch33
catch33 <- catch %>%
group_by(Year, Month) %>%
summarize(meanflow = mean(Discharge))
catch33
meanflow <- catch %>%
group_by(Year, Month) %>%
summarize(flowmean = mean(Discharge),
flowSD = SD(Discharge))
meanflow <- catch %>%
group_by(Year, Month) %>%
summarize(flowmean = mean(Discharge),
flowSD = sd(Discharge))
meanflow
colnames(catch)
meantide <- catch %>%
group_by(Year, Month) %>%
summarize(TideMean = mean(TideChange),
TideSD = sd(TideChange))
meantide
meanflow
meantide <- catch %>%
group_by(Year, Month) %>%
summarize(TideMean = mean(TideChange),
TideSD = sd(TideChange))
meantide
colnames(catch)
View(catch)
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Rain)
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Rain),
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
catch$Month  <- as.numeric(format(as.Date(catch$Date, format = "%d/%m%Y"), "%m"))
#### Prepare Summary Stats ####
flow.summary <- catch %>%
group_by(Year, Month) %>%
summarize(FlowMean = mean(Discharge),
FlowSD = sd(Discharge))
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Rain),
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
catch$Year  <- as.numeric(format(as.Date(catch$Date, format = "%d/%m%Y"), "%Y"))
#### Prepare Summary Stats ####
flow.summary <- catch %>%
group_by(Year, Month) %>%
summarize(FlowMean = mean(Discharge),
FlowSD = sd(Discharge))
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Rain),
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
rain.summary
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Rain),
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
catch
#### EAV Personal Project
#### Clear workspace ####
rm(list = ls())
#### Load Packages and Themes ####
library(tidyverse)
library(tidyr)
library(dplyr)
library(lubridate)
#library(plyr)
#library(readr)
library(reshape2)
library(ggplot2)
#library(extrafont)
#library(scales)
library(readxl)
library(data.table)
#library(purrr)
library(read_csv)
library(data.table)
#### Load and Format Data ####
####  1. Create Date Sequence from 15-July-2002 to 15-Sept-2021 ####
df <- data.frame(Date = seq(as.Date('2002-07-15'), as.Date('2021-09-15'), by = 'days'))   ## Create dataframe of all dates between July 15, 2002 and Sept 15, 2021.
df$month  <- as.numeric(format(as.Date(df$Date, format = "%d/%m%Y"), "%m"))           ## Calculate month associated with each date
date_seq <- subset(df, month >= 7 & month <=9)
####    2. WEATHER DATA ####
## Set WD for Weather Data
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/WeatherData/")
## Import all files and create dataset
weather <-  list.files(pattern = "csv$") %>%
map_df(~read_csv(., col_types = cols(.default = "c")))
colnames(weather)
## Select Key Columns
wx <- weather %>% select('Date/Time',
'Year',
'Month',
'Day',
'Total Rain (mm)',
'Total Precip (mm)')
## Rename Key Columns
wx <- wx %>%
rename(Date = `Date/Time`,
Rain = `Total Rain (mm)`,
Precip = `Total Precip (mm)`)
colnames(wx)
## Format Date
wx$Date <- as_date(wx$Date)
## Recalculate Month for each date
wx$Month <- month(as.POSIXlt(wx$Date, format= "%d/%m/%Y"))
## Reduce dataset to only show dates between July 1 to Sept 30.
wx <- wx %>% filter(Month >= 7, Month <=9)
#### 3. CATCH DATA (Daily) ####
setwd("C:/Users/evogt/Desktop/R Data/Tyee/Data/") # Set up WD for other non-weather datasets).
raw_catch  <- read_excel("TyeeCatchData.xlsx") # Date, time and size of capture
## Format Catch Data ##
raw_catch$TimeAdj <- as.POSIXct(raw_catch$TimeAdj , format = "%d%m%Y%H:%M:%S")
raw_catch$DateStandard <- as.POSIXct(raw_catch$DateStandard , format = "%d%m%Y%H:%M:%S")
raw_catch$RawDate <- as.Date(raw_catch$RawDate)
#### 4. TIDE DATA (Hourly) ####
raw_tides  <- read_excel("TideData.xlsx")      # Hourly tide data
## Format Tide Data ##
raw_tides$DateTime <- as.POSIXct(raw_tides$DateTime , format = "%d%m%Y%H:%M:%S")
raw_tides$Date <- as.Date(raw_tides$Date)
raw_tides <- raw_tides %>% rename(TideHeight = "SLEV(metres)")
#### 5. FLOW DATA (Daily) ####
## Import data ##
raw_flow   <- read_excel("CR_Discharge.xlsx")  # daily discharge data
## Format Flow Data ##
raw_flow$Date <- as.Date(raw_flow$Date)
raw_flow <- raw_flow %>% rename(Discharge = Value)
#### Merge Datasets ####
## Merge Flow Data with Date Sequence Data ##
flows <- merge(date_seq, raw_flow, by = "Date")
## Remove unnecessary columns ##
colnames(flows)
flows <- subset(flows, select = -c(Year, month, Month, PARAM, StationID, SYM))
## Merge Weather data with Flows
flowx <- merge(flows, wx, by = "Date")
## Merge Tide Data to Catch Data ##
tidecatch <- merge(raw_catch, raw_tides, by = "DateTime")
tidecatch$ID <-seq.int(nrow(tidecatch))                               ## Create "ID" column, to treat each row independently.
colnames(tidecatch)
## Remove Tide Action from catches with no known time.
tidecatch$TideAction[tidecatch$Time == 0] <- "UnknownTide"
tidecatch$TideAction <- as.factor(tidecatch$TideAction)
colnames(tidecatch)
## Switch Tide Action to Wide and Merge with TideCatch Dataset
wide <-  with(tidecatch, table(ID, TideAction))
catch22 <- as.data.frame.matrix(wide)
catch22$ID <- row.names(catch22)
tidecatch22 <- merge(tidecatch, catch22, by = "ID", all = TRUE)
## Remove unnecessary columns ##
tidecatch <- subset(tidecatch22, select = -c(Year.y, Year.x, RawTime, TimeAdj, RawDate, Time2, Month))
colnames(tidecatch)
## Merge Flows Data with TideCatch Data ##
catch <- merge(flowx, tidecatch, by = "Date", all = TRUE)
catch$Month  <- as.numeric(format(as.Date(catch$Date, format = "%d/%m%Y"), "%m"))
catch$Year  <- as.numeric(format(as.Date(catch$Date, format = "%d/%m%Y"), "%Y"))
## Remove unnecessary columns ##
catch <- subset(catch, select = -DateStandard)
colnames(catch)
View(catch)
#### Prepare Summary Stats ####
flow.summary <- catch %>%
group_by(Year, Month) %>%
summarize(FlowMean = mean(Discharge),
FlowSD = sd(Discharge))
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Rain),
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
colnames(catch)
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Rain))
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Precip)),
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Precip),
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
View(catch)
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Rain, na.rm = TRUE),
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
catch.summary <- catch %>%
group_by(Year,Month,TideAction) %>%
summarize(total.catch = tally('#Fish Captured'))
catch
summary(catch)
str(catch)
## Format as numeric
catch[, c(4:7,9,13:14)] <- sapply(catch[, c(4:7,9,13:14)], as.numeric)
str(catch)
#### Prepare Summary Stats ####
flow.summary <- catch %>%
group_by(Year, Month) %>%
summarize(FlowMean = mean(Discharge),
FlowSD = sd(Discharge))
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Rain, na.rm = TRUE),
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
rain.summary
rain.summary <- catch %>%
group_by(Year, Month) %>%
summarize(Rain.Total = sum(Rain, na.rm = FALSE),
Rain.Mean = mean(Rain),
Rain.SD = sd(Rain))
rain.summary
